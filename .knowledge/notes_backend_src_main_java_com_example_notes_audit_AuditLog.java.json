{"is_source_file": true, "format": "Java", "description": "Java entity class representing audit log entries with fields for user actions, entity info, timestamps, and state snapshots", "external_files": ["jakarta.persistence.*", "java.time.OffsetDateTime", "java.util.UUID"], "external_methods": ["UUID.randomUUID()", "OffsetDateTime.now()"], "published": ["com.example.notes.audit.AuditLog"], "classes": [{"name": "AuditLog", "description": "Entity class for storing audit log entries with various details about user actions and entity state"}], "methods": [{"name": "getId", "description": "Returns the UUID of the audit log entry"}, {"name": "setId", "description": "Sets the UUID of the audit log entry"}, {"name": "getTimestamp", "description": "Returns the timestamp of when the audit event occurred"}, {"name": "setTimestamp", "description": "Sets the timestamp of when the audit event occurred"}, {"name": "getUserId", "description": "Returns the user ID associated with the audit event"}, {"name": "setUserId", "description": "Sets the user ID associated with the audit event"}, {"name": "getAction", "description": "Returns the action performed, as an AuditAction enum"}, {"name": "setAction", "description": "Sets the action performed, as an AuditAction enum"}, {"name": "getEntityType", "description": "Returns the type of entity involved in the audit event"}, {"name": "setEntityType", "description": "Sets the type of entity involved in the audit event"}, {"name": "getEntityId", "description": "Returns the ID of the entity involved"}, {"name": "setEntityId", "description": "Sets the ID of the entity involved"}, {"name": "getBeforeState", "description": "Returns the prior state snapshot as a string"}, {"name": "setBeforeState", "description": "Sets the prior state snapshot"}, {"name": "getAfterState", "description": "Returns the post-action state snapshot as a string"}, {"name": "setAfterState", "description": "Sets the post-action state snapshot"}, {"name": "getReason", "description": "Returns the reason for the audit log entry, if provided"}, {"name": "setReason", "description": "Sets the reason for the audit log entry"}, {"name": "getError", "description": "Returns any error messages associated with the audit event"}, {"name": "setError", "description": "Sets the error message associated with the audit event"}, {"name": "getSignature", "description": "Returns the optional signature for critical operations"}, {"name": "setSignature", "description": "Sets the optional signature for critical operations"}], "calls": ["UUID.randomUUID()", "OffsetDateTime.now()"], "search-terms": ["AuditLog entity", "audit_logs table", "entityType", "audit action", "beforeState", "afterState", "signature"], "state": 2, "file_id": 11, "knowledge_revision": 57, "git_revision": "", "revision_history": [{"26": ""}, {"57": ""}], "hash": "2ce471d09dce29fd4f254d76da1c76aa", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/src/main/java/com/example/notes/audit/AuditLog.java"}